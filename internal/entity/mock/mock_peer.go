// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tjjh89017/stunmesh-go/internal/entity (interfaces: PeerSearcher,PeerAllower)
//
// Generated by this command:
//
//	mockgen -destination=./mock/mock_peer.go -package=mock_entity . PeerSearcher,PeerAllower
//

// Package mock_entity is a generated GoMock package.
package mock_entity

import (
	context "context"
	reflect "reflect"

	entity "github.com/tjjh89017/stunmesh-go/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockPeerSearcher is a mock of PeerSearcher interface.
type MockPeerSearcher struct {
	ctrl     *gomock.Controller
	recorder *MockPeerSearcherMockRecorder
}

// MockPeerSearcherMockRecorder is the mock recorder for MockPeerSearcher.
type MockPeerSearcherMockRecorder struct {
	mock *MockPeerSearcher
}

// NewMockPeerSearcher creates a new mock instance.
func NewMockPeerSearcher(ctrl *gomock.Controller) *MockPeerSearcher {
	mock := &MockPeerSearcher{ctrl: ctrl}
	mock.recorder = &MockPeerSearcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeerSearcher) EXPECT() *MockPeerSearcherMockRecorder {
	return m.recorder
}

// SearchByDevice mocks base method.
func (m *MockPeerSearcher) SearchByDevice(arg0 context.Context, arg1 entity.DeviceId) ([]*entity.Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByDevice", arg0, arg1)
	ret0, _ := ret[0].([]*entity.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByDevice indicates an expected call of SearchByDevice.
func (mr *MockPeerSearcherMockRecorder) SearchByDevice(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByDevice", reflect.TypeOf((*MockPeerSearcher)(nil).SearchByDevice), arg0, arg1)
}

// MockPeerAllower is a mock of PeerAllower interface.
type MockPeerAllower struct {
	ctrl     *gomock.Controller
	recorder *MockPeerAllowerMockRecorder
}

// MockPeerAllowerMockRecorder is the mock recorder for MockPeerAllower.
type MockPeerAllowerMockRecorder struct {
	mock *MockPeerAllower
}

// NewMockPeerAllower creates a new mock instance.
func NewMockPeerAllower(ctrl *gomock.Controller) *MockPeerAllower {
	mock := &MockPeerAllower{ctrl: ctrl}
	mock.recorder = &MockPeerAllowerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeerAllower) EXPECT() *MockPeerAllowerMockRecorder {
	return m.recorder
}

// Allow mocks base method.
func (m *MockPeerAllower) Allow(arg0 context.Context, arg1 string, arg2 []byte, arg3 entity.PeerId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allow", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allow indicates an expected call of Allow.
func (mr *MockPeerAllowerMockRecorder) Allow(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allow", reflect.TypeOf((*MockPeerAllower)(nil).Allow), arg0, arg1, arg2, arg3)
}
