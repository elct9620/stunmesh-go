// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tjjh89017/stunmesh-go/internal/ctrl (interfaces: DeviceRepository,PeerRepository)
//
// Generated by this command:
//
//	mockgen -destination=./mock/mock_repository.go -package=mock_ctrl . DeviceRepository,PeerRepository
//

// Package mock_ctrl is a generated GoMock package.
package mock_ctrl

import (
	context "context"
	reflect "reflect"

	entity "github.com/tjjh89017/stunmesh-go/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockDeviceRepository is a mock of DeviceRepository interface.
type MockDeviceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceRepositoryMockRecorder
}

// MockDeviceRepositoryMockRecorder is the mock recorder for MockDeviceRepository.
type MockDeviceRepositoryMockRecorder struct {
	mock *MockDeviceRepository
}

// NewMockDeviceRepository creates a new mock instance.
func NewMockDeviceRepository(ctrl *gomock.Controller) *MockDeviceRepository {
	mock := &MockDeviceRepository{ctrl: ctrl}
	mock.recorder = &MockDeviceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceRepository) EXPECT() *MockDeviceRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockDeviceRepository) Find(arg0 context.Context, arg1 entity.DeviceId) (*entity.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(*entity.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockDeviceRepositoryMockRecorder) Find(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockDeviceRepository)(nil).Find), arg0, arg1)
}

// List mocks base method.
func (m *MockDeviceRepository) List(arg0 context.Context) ([]*entity.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*entity.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockDeviceRepositoryMockRecorder) List(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDeviceRepository)(nil).List), arg0)
}

// Save mocks base method.
func (m *MockDeviceRepository) Save(arg0 context.Context, arg1 *entity.Device) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Save", arg0, arg1)
}

// Save indicates an expected call of Save.
func (mr *MockDeviceRepositoryMockRecorder) Save(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockDeviceRepository)(nil).Save), arg0, arg1)
}

// MockPeerRepository is a mock of PeerRepository interface.
type MockPeerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPeerRepositoryMockRecorder
}

// MockPeerRepositoryMockRecorder is the mock recorder for MockPeerRepository.
type MockPeerRepositoryMockRecorder struct {
	mock *MockPeerRepository
}

// NewMockPeerRepository creates a new mock instance.
func NewMockPeerRepository(ctrl *gomock.Controller) *MockPeerRepository {
	mock := &MockPeerRepository{ctrl: ctrl}
	mock.recorder = &MockPeerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeerRepository) EXPECT() *MockPeerRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockPeerRepository) Find(arg0 context.Context, arg1 entity.PeerId) (*entity.Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(*entity.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockPeerRepositoryMockRecorder) Find(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockPeerRepository)(nil).Find), arg0, arg1)
}

// List mocks base method.
func (m *MockPeerRepository) List(arg0 context.Context) ([]*entity.Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*entity.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPeerRepositoryMockRecorder) List(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPeerRepository)(nil).List), arg0)
}

// ListByDevice mocks base method.
func (m *MockPeerRepository) ListByDevice(arg0 context.Context, arg1 entity.DeviceId) ([]*entity.Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByDevice", arg0, arg1)
	ret0, _ := ret[0].([]*entity.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByDevice indicates an expected call of ListByDevice.
func (mr *MockPeerRepositoryMockRecorder) ListByDevice(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByDevice", reflect.TypeOf((*MockPeerRepository)(nil).ListByDevice), arg0, arg1)
}

// Save mocks base method.
func (m *MockPeerRepository) Save(arg0 context.Context, arg1 *entity.Peer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Save", arg0, arg1)
}

// Save indicates an expected call of Save.
func (mr *MockPeerRepositoryMockRecorder) Save(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockPeerRepository)(nil).Save), arg0, arg1)
}
